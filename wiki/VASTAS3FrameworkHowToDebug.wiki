#summary Debugging the Framework
#sidebar TableOfContents

The framework can output a range of debug information as it runs.

The debug configuration is controlled through the "debug" config group. A typical configuration is:

{{{
        "debug": {
	    "debugger": "firebug",
    	    "levels": "all"
        },
}}}

This config says to report "all" debug information to the "firebug" console. It's worth noting, reporting "all" debug information will slow down the framework operation considerably.

To fine tune and identify the debug information to output, a range of options can be specified in the `levels` configuration parameter.

The following table identifies the various debug information categories that can be output:

|| *parameter*  || *description* ||
||  `all` ||  Prints all debug messages ||
||  `vast_template` || Prints debug messages generated during requesting and parsing the VAST ad data ||
||  `cuepoint_events` ||  Prints all debug messages fired when cuepoints are triggered ||
||  `segment_formation` ||  Prints all debug messages generated when the stream sequence is formed ||
||  `region_formation` ||  Prints all debug messages associated with the construction of regions ||
||  `cuepoint_formation` ||  Prints all debug messages associated with establishing cuepoints ||
||  `config` ||  Prints all debug messages generated as the config data is read ||
||  `clickthrough_events` ||  Prints debug messages associated with click through events ||
||  `http_calls` ||  Prints all debug messages generated as HTTP calls are made ||
||  `fatal` ||  Prints all debug messages marked as fatal ||
||  `mouse_events` ||  Prints all debug messages associated with mouse events ||
||  `playlist` ||  Prints all debug messages generated as playlists are manipulated ||
|| `tracking_table` || Prints all debug messages tied to the tracking table ||
|| `display_events` || Prints all debug messages associated with non-linear ad display events ||
|| `tracking_events` || Prints all debug messages tied to tracking events ||

By default, the framework supports both the DeMonster debugger and output via Firebug.

To output to DeMonster specify `demonster` as the `debugger` option.

Multiple debuggers can be used at once. To use both firebug and demonster at the same time, specify each comma separated (e.g. `firebug, demonster`) as the `debugger` option.