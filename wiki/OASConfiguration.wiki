#summary Configuration Options for the Open Ad Streamers and VAST Framework
#sidebar TableOfContents

A common approach to configuration is taken across all Open Ad Streamers and the VAST AS3 Framework.

Configuration data is specified in JSON form.

A wide range of configuration options are available to ensure that the Ad Streamer can sequence and
schedule just about any form of VAST compliant video advertising across any number of programme
streams. The following example is a more complex demonstration of the range of configuration options
available. In this code snippet, the configuration for a Flowplayer example ([http://static.openvideoads.org/examples/openadstreamer/flowplayer/examples/rtmp-example03.html rtmp-example03.html]) is given.

{{{
flowplayer("a.example", "../dist/flowplayer-3.1.3-dev.swf", {
    "plugins": {
        "controls": {
            "autoHide": "always"
        },

        "openAdStreamer": {
            "url": "../dist/OpenAdStreamer.swf",

            "providers": { 
                    "rtmp": "../dist/flowplayer.rtmp-3.1.3-dev.swf"
             },

            "shows": {
		    "baseURL": "rtmp://ne7c0nwbit.rtmphost.com/videoplayer",
	            "streams": [ { "file":"mp4:bbb_640x360_h264.mp4", "duration":"00:00:35" } ]
            },

            "overlays": {
		    "regions": [
			    {
			          "id": "bottom",
		    	      	  "verticalAlign": "bottom",
		        	  "horizontalAlign": "center",
		          	  "backgroundColor": "#000000",
		          	  "width": 300,
		          	  "height": 40
		            }
		    ]
            },

            "ads": {
                    "servers": [
                            {
                                 "type": "OpenX",
                                 "apiAddress": "http://openx.openvideoads.org/openx/www/delivery/fc.php"
                            }
                    ],

	            "schedule": [
	                    {
	                	 "zone": "1",
	                  	 "position": "pre-roll"
	                    },
	                    {
	                	 "zone": "2",
	                  	 "position": "bottom",
	                  	 "width": 600,
	                  	 "height": 40,
	                  	 "startTime": "00:00:05",
	                  	 "duration": "15"
	                    }
	            ],
            },

            "debug": {
	            "levels": "all",
    	            "debugger": "firebug"
            }
        }
    }
});
}}}

In the example above a single RTMP show stream (bbb_640x360_h264.mp4) is to play 35 seconds. Before the show stream begins a pre-roll ad is to be served. During the playback of the stream an overlay ad is to be displayed in a region defined as "bottom". All debug output is to be sent to "firebug" as the Ad Streamer operates.

To explore more configuration examples, review the following:

  * The [http://www.bouncingminds.com/plugins/flowplayer/openvideoads/ea-0.1.1/bouncingminds.openX.flowplayer.http.bin/examples/index.html Flowplayer Open Ad Streamer worked examples]
  * The [http://www.bouncingminds.com/plugins/longtail/jwplayer/openvideoads/ea-0.3.0/bouncingminds.openX.jwplayer.bin/examples/index.html JW Player Open Ad Streamer worked examples]

While reviewing that specific configuration it is important to acknowledge that the configuration data is broken into 6 separate "groupings":

    * General
    * Show
    * Ads
    * Providers
    * Overlays
    * Debug

Each of these "groupings" have a specific set of configuration options that impact the way ads are played by the VAST Framework and Open Ad Streamers.

As a result, at a high level a typical configuration template appears as follows:

{{{
// general options here

"providers": {
     // provider options here
},

"shows": {
     // show stream options here
},

"overlays": {
     // overlay options here
},

"ads": {
     // ad schedule options here
},

"debug": {
     // debug configuration here
}
}}}

Let's assess the detailed options available in each of these configuration groups.

== General Configuration Options ==

General configuration options are applied across all configuration groups. In general they apply to the way streams are to be played by the player (e.g. indicating if the ad streamer is only to serve "progressive" or "streaming" types, the bit rate of the streams, the type of stream (mp4 or flv), if file extensions are to be automatically removed, and the base address for streams.

A full example of a general config grouping is:

{{{
    "autoStart": true,
    "deliveryType": "progressive",
    "removeFileExtension": true,
    "allowPlaylistControl": true,
}}}

A description of each property follows:

|| *Property name* || *Since* || *Required* || *Default* || *Description* ||
|| `autoStart` || 0.1.1 || Optional || True || A true or false value that identifies whether or not each stream is to automatically start playing ||
|| `deliveryType` || 0.1.1 || Optional || "any" || The type of streams to be served - can be either "progressive", "streaming" or "any". "any" is the default setting ||
|| `allowPlaylistControl` || 0.1.1 || Optional || false || Player related configuration option that identifies if playlist (skip to next clip and back) are allowed during playback ||
|| `removeFileExtension` || 0.1.1 || Optional || false || Forces removal of file extensions for video stream file names returned in the VAST data - particularly useful for ensuring that FLV streams play on a streaming server ||


== Providers Configuration Options ==

The providers configuration block exists primarily for players that allow separate "protocol providers" to be loaded - Flowplayer is an example where different protocols are supported by separately loaded plugins.

The configuration block allows a loadable provider to be defined for the protocols supported by the Ad Streamers - http and rtmp (at this time). More protocols will be supported shortly.

An example provider configuration for Flowplayer is as follows - you can see this example used in the Flowplayer pseudo-streaming example [http://static.openvideoads.org/examples/openadstreamer/flowplayer/examples/http-example39.html http-example39.html]

{{{
    // HTTP pseudo-streaming provider - instream instance for mid-roll and child streams
    pseudo: {          
        url: "../dist/flowplayer.pseudostreaming-3.1.3.swf"
    },
        
    // RTMP provider - instream instance is for mid-roll and child streams
    rtmp: {
        url: "../dist/flowplayer.rtmp-3.1.2.swf"
    },

    openAdStreamer: {
        ....
        "providers": { 
                "http": "pseudo",
                "rtmp": "rtmp"
        },
        ....
    }
}}}

In this example, the Flowplayer HTTP pseudo-streaming plugin is used to serve the HTTP streams.

The provider configuration options may also be specified within a "stream" or "ads" configuration block. 

|| *Property name* || *Since* || *Required* || *Default* || *Description* ||
|| `http` || 0.3.4 || Optional || "http" || A string that can be used by the open ad streamer to identify the HTTP provider to use ||
|| `rtmp` || 0.3.4 || Optional || "rtmp" || A string that can be used by the open ad streamer to identify the RTMP provider to use ||

== Shows Configuration Options ==

The mainline show streams against which ads are to be scheduled are specified in the Shows configuration grouping.

Below is an example of an comprehensive configuration:

{{{
    "shows": {
            "baseURL": "rtmp://ne7c0nwbit.rtmphost.com/videoplayer",
	    "streams": [ 
                  { 
                         "file":"mp4:bbb_640x360_h264.mp4", 
                         "duration":"00:00:35" 
                  } 
            ]
            "autoPlay": true,
            "deliveryType": "progressive",
            "streamType:", "flv",
            "bitrate": "any",
            "metaData": false,
            "removeFileExtension": true,
            "allowPlaylistControl": true,
    },
}}}

The "streams" configuration entry is probably the most important property in the Shows group as it declares the actual streams to be played. It is only mandatory field in the group.

A stream may be declared with either:

  * A baseURL address
  * With a fully qualified "file" address

The following examples illustrate valid show stream definitions:

{{{
    "shows": {
        "baseURL": "http://streaming.openvideoads.org:81/shows",
        "streams": [
            { 
                "file":"the-black-hole.mp4", 
                "duration":"00:01:00",
                "metaData": false,
                "provider": "pseudo" 
            }
        ]
   }
}}}

{{{
    "shows": {
        "streams": [
            { 
                "file":"http://streaming.openvideoads.org:81/shows/the-black-hole.mp4", 
                "duration":"00:01:00",
                "metaData": false,
                "provider": "pseudo" 
            }
        ]
   }
}}}

|| *Property name* || *Since* || *Optional* || *Default* || *Description* ||
|| `autoPlay` || 0.1.1 || Optional || false || A true or false value that identifies whether or not each stream is to automatically start playing ||
|| `baseURL` || 0.1.1 || Optional || null || The base URL from which the file is to be served. In the case of an RTMP stream, the baseURL is normally the connection address of the RTMP server ||
|| `bitrate` || 0.1.1 || Optional || null || Identifies the acceptable bit rates for this instance of the player - acceptable values are "any" or a range such as "600-700" ||
|| `deliveryType` || 0.1.1 || Optional || "any" || The type of streams to be served - can be either "progressive", "streaming" or "any" to cover a mixed set of types ||
|| `metaData` || 0.1.1 || Optional || true || Indicates whether or not the player should wait for the metadata information in the stream to be received before starting to play  - always set to "false" if you notice a video can be heard but not seen - the value is "false" by default ||
|| `allowPlaylistControl` || 0.1.1 || Optional || false || Player related configuration option that identifies if playlist (skip to next clip and back) are allowed during playback ||
|| `removeFileExtension` || 0.1.1 || Optional || false || Forces removal of file extensions for video stream file names returned in the VAST data - particularly useful for ensuring that FLV streams play on a streaming server ||
|| `streams` || 0.1.1 ||  Required || an empty list || An array of stream definitions which identifies the main programme streams to be played by the player - ads are sequenced in accordance with the Ad Slot schedule against these streams. As the property is an array, the following format is expected `[ { stream1-name, stream1-duration }, ... { streamN-name, streamN-duration} ]`. The `stream-duration` must be declared in time stamp format `HH:MM:SS` (e.g. `01:10:15` for a duration of 1 hour 10 minutes and 15 seconds). Streams may be declared as a fully qualified filename (e.g. `"rtmp://ne7c0nwbit.rtmphost.com/videoplayer/mp4:bbb_640x360_h264.mp4` ) or as files relative to the `baseURL` declared in the shows configuration grouping.  ||
|| `streamType` || 0.3.4 || Optional || "mp4" || A specific value that identifies the type of stream to be played - can be either "mp4", "flv" or "mixed" ||
|| `subscribe` || not available || Optional || null || To be used by live streams only - not currently active ||

For each show stream, a number of configuration items may be specified:

|| *Property name* || *Since* || *Optional* || *Default* || *Description* ||
|| `file` || 0.1.1 || Mandatory || null || The address of the file to serve. If no `baseURL` is specified, the file address must be fully qualified (e.g. "http://..." or "rtmp://...")  ||
|| `baseURL` || 0.1.1 || Optional || null || The base URL from which the file is to be served. In the case of an RTMP stream, the baseURL is normally the connection address of the RTMP server ||
|| `metaData` || 0.1.1 || Optional || true || Indicates whether or not the player should wait for the metadata information in the stream to be received before starting to play  - always set to "false" if you notice a video can be heard but not seen - the value is "false" by default ||
|| `provider` || 0.3.4 || Optional || null || A string value that can be used by an Open Ad Streamer to identify the "provider" to use to stream the file - in the case of Flowplayer, this will  be a provider plugin ID ||
|| `autoPlay` || 0.3.4 || Optional || true || A true or false value that identifies whether or not each stream is to automatically start playing ||
|| `playOnce` || 0.3.4 || Optional || false || A true or false value that identifies whether or this stream can be "replayed" ||

== Ads Configuration Options ==

The Ads grouping captures all ad specific configuration settings.

An example configuration is as follows:

{{{
    "ads": {
        "servers": [
                {
                      "type": "OpenX",
                      "apiAddress": "http://openx.openvideoads.org/openx/www/delivery/fc.php"
                }
        ],
        "schedule": [
            {
	        "zone": "1",
                "position": "pre-roll"
	    },
	    {
                "zone": "2",
                "position": "bottom",
                "width": 450,
                "height": 50,
                "startTime": "00:00:05",
                "duration": "15"
	    }
	],
    },
}}}

In this example the ad server is defined to be of type "OpenX", a request URL is specified, and an ad schedule is defined as two separate ad slots - a pre-roll ad followed by a non-linear ad (overlay) placed in the region named "bottom".

Generally speaking, an ad configuration grouping has three sets of configuration data:

{{{
    "ads": {
        // general level settings
        "servers": []
        "schedule": []
    }
}}}

=== General Ad Configuration Settings ===

|| *Property name* || *Level* || *Version* || *Description* ||
|| `disableControls` || Both || 0.4.5 ||  Specifies whether or not the stop/scrubber is to be disabled when ads are played. The default value is `true`. Can be overriden at the `Ad Slot` level. ||
|| `companionDivIDs` || Both || 0.4.5 ||  Identifies the companion div blocks that are to be used to display companion ads accompanying a video ad. An array of identifiers is expected in the format of `[ { id:Z, width:X, height:Y }, ... { id:Z, width:X, height:Y } ]` allowing multiple companion div blocks to be specified across the web page. The `id` value must match the div block `id` in the web page. The `width` and `height` values are used by the plugin to identify which companion (specified in the VAST template) is to be shown in each div block. ||
|| `keepOverlayVisibleAfterClick` || X || 0.4.5 || Instructs the Open Ad Streamer to keep an overlay displaying on the player canvas after it's been clicked. The overlay will disappear when it's duration has expired. The default value is false ||
|| `pauseOnClickThrough` || X || 0.4.5 || Instructs the Open Ad Streamer to pause when a linear video with a "click to website setting" is clicked. The default value is true. ||
|| `clickSign` || X || 0.4.5 || See section on "Configuring the Linear Click Through Notice" ||

=== Configuring the Linear Click Through Notice ===

{{{
           "ads": {
                ...
                "clickSign": {
                    "enabled": true, 
                    "verticalAlign": "center",
                    "horizontalAlign": "center",
                    "width": 150,
                    "height": 32,
                    "opacity": 0.5,
                    "borderRadius": 20,
                    "backgroundColor": "#000000",
                    "style": ".smalltext { font-size:12; }",
                    "html": "&lt;p class=\"smalltext\" align=\"center\"&gt;CLICK ME!&lt;/p&gt;",
                    "scaleRate": 0.75
                },
                ...
           }
}}}

=== Ad Server Configuration Settings ===

|| *Property name* || *Level* || *Version* || *Description* ||
|| `type` || General || 0.4.5 ||  The type of pre-defined ad server - "OpenX", "AdTech" or "direct" ||
|| `apiAddress` || General || 0.4.5 ||  The url of the VAST compliant Ad Server ||
|| `allowAdRepetition` || General || 0.4.5 || X ||

=== Ad Schedule Configuration Settings ===

Allows a range of `ad spots` to be specified. Each `ad spot` is a unique definition of a particular type of video ad to be played against the programme stream. For example, if a `pre-roll`, `mid-roll` and `post-roll` video ad were to be scheduled when a stream plays, three individual ad spots would have to be defined - one for each video ad type. If a `pre-roll` and `overlay` were to be scheduled, 2 unique `Ad Spot` definitions are required. Ad Spot definitions can be limited to a particular "stream" or duration, and in the case of overlay/non-overlay video ads, can be scheduled to start at a particular time during a programme stream. Ad Spots are defined as an array with the format `[ { adspot1-options }, ... { adSpotN-options} ]`. Each `Ad Spot` definition must define at least a `zone`, `position` and `duration`. In addition, Overlay and Non-Overlay ads must also define a `width` and `height`.

|| *Property name* || *Level* || *Version* || *Description* ||
|| `zone` || AdSpot || 0.4.5 ||  The OpenX `zone` mapping to this ad spot. Zones are special constructs in the OpenX Ad Server. Please see the OpenX ad server documentation for more details. ||
|| `position` || AdSpot || 0.4.5 ||  The position of this ad - can be one of the following values: for linear ads `pre-roll`, `mid-roll`, `post-roll`, for non-linear overlay and non-overlay ads, the value must be specified as a region ID. ||
|| `duration` || AdSpot || 0.4.5 ||  The duration of the ad - mandatory in the case on time restricted non-linear overlay and non-overlay ads. The value is specified as a number of seconds or `'unlimited'` if the ad is to play for the entire duration of the programme stream. The default value is `'unlimited'`. ||
|| `notice` || AdSpot || 0.4.5 ||  Identifies whether or not a special notice is to be displayed when a video ad plays. For example, wording such as "This advertisement runs for 30 seconds" may be displayed. Notices are declared in the format `{ show: value, region: value, message: value}` where `show` is a `true` or `false` value, `region` is the `id` of the region where the message is to be shown and `message` is a HTML text block that specifies what to show. The `message` can contain a keyword `_seconds_` to allow the duration of the ad to be placed into the text when the message is shown. Any class styling defined in the `message` must be declared as available in the associated `region` declaration. ||
|| `applyToParts` || AdSpot || 0.4.5 ||  Allows an ad spot declaration to be restricted to a specific set of programme streams. The value is specified as an array of integers between 0 and the number of programme streams declared. For example if an Ad Spot is to be limited to only the first stream, a value of `[0]` would be declared. To limit a spot to the second and third streams `[2,3]` would be declared and so forth. ||
|| `width` || AdSpot || 0.4.5 ||  The width of the ad spot - applicable for non-linear overlay/non-overlay ads which are bound by strict dimensions. An ad must be found in the VAST data to match this width to ensure that it is displayed.||
|| `height` || AdSpot || 0.4.5 ||  The height of the ad spot - applicable for non-linear overlay/non-overlay ads which are bound by strict dimensions. An ad must be found in the VAST data to match this width to ensure that it is displayed. ||
|| `startTime` || AdSpot || 0.4.5 ||  The time an ad is to start - used by mid-roll and non-linear ads to identify when an ad is to be started during the programme stream. The value must be specified in the form of a timestamp `'HH:MM:SS'` ||

==== Modifying the Overlay Ad Templates ====

{{{
    "ads": {
        "schedule": [
            {
                "zone": "31",
                "startTime": "00:00:05",
                "duration": "15",
                "templates": {
                    "html": "<body>MY NEW TEMPLATE: _code_</body>",
                }
            }
        ],
    }
}}}

==== Mapping Ad Slots to Overlay Regions ====

{{{
     "ads": {
     ....
          "schedule": [
              {
                  "zone": "29",
                  "startTime": "00:00:05",
                  "duration": "15",
                  "regions": {
                      "text": "reserved-bottom-center-w450px-h50px-transparent"
                  }
              }
          ],
     }
}}}

== Overlays Configuration Options ==

The overlays configuration grouping allows multiple rectangular "regions" to be defined on the player canvas. These regions in turn can be used to display non-linear (overlay) advertising, ad notices and general messages.

Non-linear ads may be of the form:

  * Text
  * HTML
  * Flash (SWF)
  * Image (JPG, PNG, GIF - including animated GIF)

For an illustration of the overlay configuration grouping in action, refer to [http://static.openvideoads.org/examples/openadstreamer/flowplayer/examples/all-example19.html example19.html].

=== Declaring Regions ===

By default, 14 regions have been declared for general use by non-linear ads and system messages.

  # `reserved-bottom-w100pct-h78px-000000-o50` - a region at the bottom of the player screen, 100% wide, 78 pixels high, with a black background at 50% opacity, with an active close button
  # `reserved-bottom-w100pct-h50px-000000-o50` - a region at the bottom of the player screen, 100% wide, 50 pixels high, with a black background at 50% opacity, with an active close button
  # `reserved-bottom-w100pct-h50px-transparent` - a region at the bottom of the player screen, 100% wide, 50 pixels high with a transparent background, with an active close button
  # `reserved-bottom-w100pct-h50px-transparent-0m` - a region at the bottom of the player screen, 100% wide, 50 pixels high with a transparent background, 0 margins all around, with an active close button
  # `reserved-bottom-w450px-h50px-000000-o50` - a region at the bottom of the player screen, 450 pixels wide, 50 pixels high, with a black background at 50% opacity, with an active close button
  # `reserved-bottom-w450px-h50px-transparent` - a region at the bottom of the player screen, 450 pixels wide, 50 pixels high, with a transparent background, with an active close button
  # `reserved-bottom-w450px-h50px-transparent-0m` - a region at the bottom of the player screen, 450 pixels wide, 50 pixels high, with a transparent background and 0 margins all around, with an active close button
  # `reserved-bottom-center-w450px-h50px-000000-o50` - a region at the bottom center of the player screen, 450 pixels wide, 50 pixels high, with a black background with 50% opacity, with an active close button
  # `reserved-bottom-center-w450px-h50px-transparent` - a region at the bottom center of the player screen, 450 pixels wide, 50 pixels high, with a transparent background, with an active close button
  # `reserved-bottom-center-w450px-h50px-transparent-0m` - a region at the bottom center of the player screen, 450 pixels wide, 50 pixels high, with a transparent background, 0 margins all around
  # `reserved-bottom-center-w300px-h50px-000000-o50` - a region at the bottom center of the player screen, 300 pixels wide, 50 pixels high with a black background with 50% opacity, with an active close button
  # `reserved-bottom-center-w300px-h50px-transparent`- a region at the bottom center of the player screen, 300 pixels wide, 50 pixels high with a transparent background, with an active close button
  # `reserved-bottom-center-w300px-h50px-transparent-0m` - a region at the bottom center of the player screen, 300 pixels wide, 50 pixels high with a transparent background, 0 margins all around, with an active close button
  # `reserved-system-message` - a thin region at the base of the player screen, 100% wide, 20 pixels high, no close button, and 2 font definitions - one large sized writing 12pt (class if `normaltext`), one small sized writing 10pt (class is `smalltext`)

In addition, any number of customised regions can be declared. To illustrate how this is done, review the following Flowplayer Ad Streamer example that illustrates the options that are declared for the default "message" region:

{{{
    ....
    "overlays": {
            "regions": [
                 { 
                     "id": "message",
                     "verticalAlign": "bottom",
                     "horizontalAlign": "right",
                     "width": "100%",
                     "height": 20
                 } 
             ]
    },
    ....
}}}

Region configurations can be quite complex. There is a wide range of options that can be specified to define the "appearance" of a region. Many of these options mirror the standard CSS style attributes.

Here is a more example configuration:

{{{
    ....
            "regions": [
                  {
                      "id": "top-center",
                      "verticalAlign": "top",
                      "horizontalAlign": "center",
                      "backgroundColor": "#000000",
                      "opacity": 0.8,
                      "borderRadius": 15,
                      "padding": "-10 -10 -10 -10",
                      "width": 450,
                      "height": 50
                  }
            ]
     ....
}}}

=== The Default Overlay Ad Type/Region Mappings ===

{{{
    if(_width == 450) {
        _regions.text = "reserved-bottom-w450px-h50px-000000-o50";
        _regions.image = "reserved-bottom-w450px-h50px-transparent-0m";
        _regions.swf = "reserved-bottom-w450px-h50px-transparent";
        _regions.html = "reserved-bottom-w450px-h50px-000000-o50";				
    }
    else {
        _regions.text = "reserved-bottom-w100pct-h78px-000000-o50";
        _regions.image = "reserved-bottom-w100pct-h50px-transparent-0m";
        _regions.swf = "reserved-bottom-w100pct-h50px-transparent";
        _regions.html = "reserved-bottom-w100pct-h50px-000000-o50";
    }
}}}

=== Configuration Parameters ===

A wide range of configuration options are available, allowing you to define regions of pretty much any shape and style. Below is a complete list of options:

|| *Property name* || *Level* || *Description* ||
|| `regions` || General || An array based option that supports the configuration of 1 more or more custom properties. Declare the custom regions as `regions: [ { region1-options }, ... { regionN-options } ]` ||
|| `id` || Region || Every region that is declared using the `regions` tag must be identified by a unique name. This `id` is used by the Ad Streamer to identify which region is to be used to display a specific overlay or non-overlay `AdSlot` ||
|| `width` || Region || Specifies the width of the region - the values can either be numeric (the number of pixels) or a percentage of the screen width (e.g. `'100%'`) ||
|| `height` || Region || Specifies the height of the region - the values can either be numeric (the number of pixels) or a percentage of the screen width (e.g. `'100%'`) ||
|| `verticalAlign` || Region || Specifies the vertical alignment of the region - values can be `'top'`, `'bottom'` or a numeric value representing the Y coordination (in pixels). ||
|| `horizontalAlign` || Region || Specifies the horizonal alignment of the region - values can be `'left'`, `'right'` or a numeric value representing the X coordination (in pixels).||
|| `clickable` || Region || Identifies whether or not the region is to be clickable. This value does not override any click action properties that may be defined on at the HTML level for the objects shown in the region. This value enables or stops the `onClick()` javascript callback from firing. ||
|| `html` || Both || Specifies the initial HTML content to be loaded by default for the region ||
|| `stylesheet` || Both || Path to the stylesheet file which specifies how each tag in the content is styled. You can find more information about styling <a href="#css">here</a>. ||
|| `style` || Both || A styling object that is specified directly in the configuration. If an external stylesheet is in use, these settings override those external settings. You can find more information about styling <a href="#css">here</a>.||
|| `backgroundColor` || Both || Background color as a hexadecimal value. For example: `#ffcccc`. The length of the value is 6 characters and the prefix # is optional. ||
|| `backgroundImage` || Both || The absolute or relative path to the image that should be used as the background to this plugin. Supported formats are GIF, JPEG and PNG. The syntax is similar to CSS in that you must enclose your path inside a `url()` wrapper. See example above. ||
|| `background` || Both || A shorthand way of setting all background properties at once. Similar to CSS. The format is as follows: `backgroundImage backgroundRepeat left top`. For example: `url(/my/image.jpg) no-repeat 100 30`. The last two numbers specify the background image positioning. ||
|| `backgroundGradient` || Both || Defines a region's background gradient (ie, the way the background is faded in and out vertically). The value can be one of the predefined values "low", "medium" or "high", or you can supply an array of values, each one representing how much transparency is applied at a particular point. For example, the array `[0.2, 1.0]` means that the background will be 80% visible at the top edge and 0% visible at the bottom, and there will be a linear gradient of transparency between the two edges. You can supply any number of  point definitions in your array and they will be placed so that there is equal distance between them. For example, passing the array `[0.4, 0.6, 1.0]` will result in points at the top, middle and bottom of the background.||
|| `backgroundTransparent` || Both || Defines whether or not a region is to be transparent. Values are `true` or `false` - the default is `false` ||
|| `border` || Both || Draws a border around a region's edges. The syntax follows the CSS standard: `width style color`. For example: `"1px solid #cccccc"`. The only supported style currently is "solid", but the width and colour can be set to any valid value. ||
|| `borderRadius` || Both || Specifies the amount of rounding for each corner. Larger values mean more rounding.||
|| `padding` || X || X ||
|| `showCloseButton` || X || X ||
|| `borderWidth` || X || X ||
|| `borderColor` || X || X ||

== Debug Configuration Options ==

The debug configuration is controlled through the "debug" config group. A typical configuration is:

{{{
        "debug": {
	    "debugger": "firebug",
    	    "levels": "all"
        },
}}}

This config says to report "all" debug information to the "[http://www.getfirebug.com firebug]" console. It's worth noting, reporting "all" debug information will slow down the framework operation considerably.

===The Debug Levels===

To fine tune and identify the debug information to output, a range of options can be specified in the `levels` configuration parameter.

The following table identifies the various debug information categories that can be output:

|| *parameter*  || *description* ||
||  `all` ||  Prints all debug messages ||
||  `vast_template` || Prints debug messages generated during requesting and parsing the VAST ad data ||
||  `cuepoint_events` ||  Prints all debug messages fired when cuepoints are triggered ||
||  `segment_formation` ||  Prints all debug messages generated when the stream sequence is formed ||
||  `region_formation` ||  Prints all debug messages associated with the construction of regions ||
||  `cuepoint_formation` ||  Prints all debug messages associated with establishing cuepoints ||
||  `config` ||  Prints all debug messages generated as the config data is read ||
||  `clickthrough_events` ||  Prints debug messages associated with click through events ||
||  `http_calls` ||  Prints all debug messages generated as HTTP calls are made ||
||  `fatal` ||  Prints all debug messages marked as fatal ||
||  `mouse_events` ||  Prints all debug messages associated with mouse events ||
||  `playlist` ||  Prints all debug messages generated as playlists are manipulated ||
|| `tracking_table` || Prints all debug messages tied to the tracking table ||
|| `display_events` || Prints all debug messages associated with non-linear ad display events ||
|| `tracking_events` || Prints all debug messages tied to tracking events ||

=== Supported Debuggers===

By default, the framework supports both the [http://demonsterdebugger.com/ DeMonster] debugger and output via [http://www.getfirebug.com Firebug].

To output to [http://demonsterdebugger.com/ DeMonster] specify `demonster` as the `debugger` option.

Multiple debuggers can be used at once. To use both firebug and demonster at the same time, specify each comma separated (e.g. `firebug, demonster`) as the `debugger` option.