#summary Configuration Options for the Open Ad Streamers and VAST Framework
#sidebar TableOfContents

A common approach to configuration is taken across all Open Ad Streamers and the VAST AS3 Framework.

Configuration data is specified in JSON form.

A wide range of configuration options are available to ensure that the Ad Streamer can sequence and
schedule just about any form of VAST compliant video advertising across any number of programme
streams. The following example is a more complex demonstration of the range of configuration options
available. In this code snippet, the configuration for a Flowplayer example (rtmp-example03.html) is given.

{{{
flowplayer("a.example", "../dist/flowplayer-3.1.3-dev.swf", {
    "plugins": {
        "controls": {
            "autoHide": "always"
        },

        "openAdStreamer": {
            "url": "../dist/OpenAdStreamer.swf",

            "deliveryType": "streaming",

            "providers": { 
                    "rtmp": "../dist/flowplayer.rtmp-3.1.3-dev.swf"
             },

            "shows": {
		    "baseURL": "rtmp://ne7c0nwbit.rtmphost.com/videoplayer",
	            "streams": [ { "file":"mp4:bbb_640x360_h264.mp4", "duration":"00:00:35" } ]
            },

            "overlays": {
		    "regions": [
			    {
			          "id": "bottom",
		    	      	  "verticalAlign": "bottom",
		        	  "horizontalAlign": "center",
		          	  "backgroundColor": "#000000",
		          	  "width": 300,
		          	  "height": 40
		            }
		    ]
            },

            "ads": {
	            "server": {
	            	    "type": "OpenX",
		            "vastURL": "http://openx.bouncingminds.com/openx/www/delivery/fc.php"
		     },

	            "schedule": [
	                    {
	                	 "zone": "1",
	                  	 "position": "pre-roll"
	                    },
	                    {
	                	 "zone": "2",
	                  	 "position": "bottom",
	                  	 "width": 600,
	                  	 "height": 40,
	                  	 "startTime": "00:00:05",
	                  	 "duration": "15"
	                    }
	            ],
            },

            "debug": {
	            "levels": "all",
    	            "debugger": "firebug"
            }
        }
    }
});
}}}

In the example above a single RTMP show stream (bbb_640x360_h264.mp4) is to play 35 seconds. Before the show stream begins a pre-roll ad is to be served. During the playback of the stream an overlay ad is to be displayed in a region defined as "bottom". All debug output is to be sent to "firebug" as the Ad Streamer operates.

While reviewing that specific configuration it is important to acknowledge that the configuration data is broken into 6 separate "groupings":

    * General
    * Show
    * Ads
    * Providers
    * Overlays
    * Debug

Each of these "groupings" have a specific set of configuration options that impact the way ads are played by the VAST Framework and Open Ad Streamers.

As a result, at a high level a typical configuration template appears as follows:

{{{
// general options here

"providers": {
     // provider options here
},

"shows": {
     // show stream options here
},

"overlays": {
     // overlay options here
},

"ads": {
     // ad schedule options here
},

"debug": {
     // debug configuration here
}
}}}

Let's assess the detailed options available in each of these configuration groups.

== General Configuration Options ==

General configuration options are applied across all configuration groups. In general they apply to the way streams are to be played by the player (e.g. indicating if the ad streamer is only to serve "progressive" or "streaming" types, the bit rate of the streams, the type of stream (mp4 or flv), if file extensions are to be automatically removed, and the base address for streams.

A full example of a general config grouping is:

{{{
        "autoStart": true,
        "deliveryType": "progressive",
        "streamType:", "flv",
        "bitrate": "any",
        "metaData": false,
        "removeFileExtension": true,
        "playContiguously": true,
        "baseURL": "http://static.openvideoads.org/streams"
}}}

A description of each property follows:

|| *Property name* || *Since* || *Description* ||
|| `autoStart` || always || A true or false value that identifies whether or not each stream is to automatically start playing ||
|| `baseURL` || always || Declares the base address for the streams to be played ||
|| `bitrate` || always || Identifies the acceptable bit rates for this instance of the player - acceptable values are "any" or a range such as "600-700" ||
|| `deliveryType` || always || The type of streams to be served - can be either "progressive" or "streaming" ||
|| `metaData` || always || ||
|| `playContiguously` || always || ||
|| `removeFileExtension` || always || Forces removal of file extensions for video stream file names returned in the VAST data - particularly useful for ensuring that FLV streams play on an FMS ||
|| `streamType` || always || A specific value that identifies the type of stream to be played - can be either "mp4" or "flv" ||


== Providers Configuration Options ==

An example provider configuration is as follows:

{{{
            "providers": { 
                "rtmp": "../dist/flowplayer.rtmp-3.1.3-dev.swf"
             },
}}}

|| *Property name* || *Since* || *Description* ||
|| `rmtp` || always || ||
|| `http` || always || ||

== Shows Configuration Options ==

|| *Property name* || *Since* || *Description* ||
|| `streams` || always ||  An array of stream definitions which identifies the main programme RTMP streams to be played by the player - ads are sequenced in accordance with the Ad Slot schedule against these streams. As the property is an array, the following format is expected `[ { stream1-name, stream1-duration }, ... { streamN-name, streamN-duration} ]`. The `stream-duration` must be declared in timestamp format `HH:MM:SS` (e.g. `01:10:15` for a duration of 1 hour 10 minutes and 15 seconds). ||
|| `subscribe` || || ||

== Overlays Configuration Options ==

The overlays configuration grouping allows multiple HTML "regions" to be defined on the player canvas.

Use this grouping to define a series of "regions" on the player that can be used to display overlay and non-overlay advertising. Given that a region is basically a HTML block, it can also be used to display messaging to accompany a video ad such as sponsorship messaging or "this is an advert" type messaging.

=== Declaring Regions ===

By default, 4 regions are automatically declared - a *"top"* region that occupies the width of the player 50 pixels deep, a *"bottom"* region that is also the width of the player and 50 pixels height, a region that covers the *"full screen"*, and a thin region (20px high) at the base of the screen to be used for general ad messaging (tagged *"message"*).

Any number of customised regions can be declared. To illustrate how this is done, review the following example that illustrates the options that are declared for the default "message" region:

{{{
    ....
    plugins: {
        openXRegions: {
            url: 'flash/OpenXVastRegions-0.4.1.swf',
            regions: [
               { id: 'message',
                 verticalAlign: 'bottom',
                 horizontalAlign: 'right',
                 width: '100%',
                 height: 20
               }
            ]
        }
     ....
}}}

A "region" can be configured in much the same way as the Content plugin is configured.
    
Here is an example configuration for the Regions plugin:
{{{
    ....
    plugins: {
        openXRegions: {
            url: 'flash/OpenXVastRegions-0.4.1.swf',
            stylesheet: 'css/region-general.css',
            borderRadius: 1,
            border: '0px', 
            backgroundTransparent: true,
            backgroundColor: 'transparent',
            onClick: function() {},
            regions: [
               { id: 'message',
                 verticalAlign: 'bottom',
                 horizontalAlign: 'right',
                 width: '100%',
                 height: 20,
                 stylesheet: 'css/region-message.css',                 
                 backgroundColor: '#ffffff',
                 showCloseButton: true,
                 closeButtonImage: 'images/closebutton.gif',
                 html: '&lt;p class="warning" align="right"&gt;This is an advertisement&lt;/p&gt;',
               }
            ]
        }
     ....
}}}
The example above illustrates how options are defined at general and region specific levels. In this example, a stylesheet is attached to the plugin (`region-general.css`) - the styles defined in this stylesheet are available to be used in all regions. Several other options are defined at a general level - the border, background color and transparency, and a radius for the border. Unless these values are overridden by a specific region, they will automatically be applied at the region level.

The "message" region specifically defines an additional stylesheet to pull in and an overriding background color (`#ffffff`). It also specifies that a close button is to be displayed for this region and that the attached image is to be shown when the region is visible on the player.

HTML text to be displayed by the regions can be defined at a general or regions specific level. In the example above, a general warning message is configured as the standard body for the "message" region. The html definition references a style class ('warning')  that is defined in the `region-message.css` stylesheet.

Javascript callbacks are also available at a general level. In the example above, the `onClick()` callback is defined - when a region is clicked, this callback will be executed allowing you to define custom behaviour to occur outside of the player when the user clicks on advertising region.

=== Configuration Parameters ===

A wide range of configuration options are available, allowing you to define regions of pretty much any shape and style. Below is a complete list of options:

|| *Property name* || *Level* || *Description* ||
|| `url` || General || The url of the Regions swf file ||
|| `regions` || General || An array based option that supports the configuration of 1 more or more custom properties. Declare the custom regions as `regions: [ { region1-options }, ... { regionN-options } ]` ||
|| `id` || Region || Every region that is declared using the `regions` tag must be identified by a unique name. This `id` is used by the Ad Streamer to identify which region is to be used to display a specific overlay or non-overlay `AdSlot` ||
|| `width` || Region || Specifies the width of the region - the values can either be numeric (the number of pixels) or a percentage of the screen width (e.g. `'100%'`) ||
|| `height` || Region || Specifies the height of the region - the values can either be numeric (the number of pixels) or a percentage of the screen width (e.g. `'100%'`) ||
|| `verticalAlign` || Region || Specifies the vertical alignment of the region - values can be `'top'`, `'bottom'` or a numeric value representing the Y coordination (in pixels). ||
|| `horizontalAlign` || Region || Specifies the horizonal alignment of the region - values can be `'left'`, `'right'` or a numeric value representing the X coordination (in pixels).||
|| `clickable` || Region || Identifies whether or not the region is to be clickable. This value does not override any click action properties that may be defined on at the HTML level for the objects shown in the region. This value enables or stops the `onClick()` javascript callback from firing. ||
|| `clickToPlay` || Region || Identifies whether or not clicking on the region is to invoke a `player.play()` call. ||
|| `html` || Both || Specifies the initial HTML content to be loaded by default for the region ||
|| `stylesheet` || Both || Path to the stylesheet file which specifies how each tag in the content is styled. You can find more information about styling <a href="#css">here</a>. ||
|| `style` || Both || A styling object that is specified directly in the configuration. If an external stylesheet is in use, these settings override those external settings. You can find more information about styling <a href="#css">here</a>.||
|| `backgroundColor` || Both || Background color as a hexadecimal value. For example: `#ffcccc`. The length of the value is 6 characters and the prefix # is optional. ||
|| `backgroundImage` || Both || The absolute or relative path to the image that should be used as the background to this plugin. Supported formats are GIF, JPEG and PNG. The syntax is similar to CSS in that you must enclose your path inside a `url()` wrapper. See example above. ||
|| `background` || Both || A shorthand way of setting all background properties at once. Similar to CSS. The format is as follows: `backgroundImage backgroundRepeat left top`. For example: `url(/my/image.jpg) no-repeat 100 30`. The last two numbers specify the background image positioning. ||
|| `backgroundGradient` || Both || Defines a region's background gradient (ie, the way the background is faded in and out vertically). The value can be one of the predefined values "low", "medium" or "high", or you can supply an array of values, each one representing how much transparency is applied at a particular point. For example, the array `[0.2, 1.0]` means that the background will be 80% visible at the top edge and 0% visible at the bottom, and there will be a linear gradient of transparency between the two edges. You can supply any number of  point definitions in your array and they will be placed so that there is equal distance between them. For example, passing the array `[0.4, 0.6, 1.0]` will result in points at the top, middle and bottom of the background.||
|| `backgroundTransparent` || Both || Defines whether or not a region is to be transparent. Values are `true` or `false` - the default is `false` ||
|| `border` || Both || Draws a border around a region's edges. The syntax follows the CSS standard: `width style color`. For example: `"1px solid #cccccc"`. The only supported style currently is "solid", but the width and colour can be set to any valid value. ||
|| `borderRadius` || Both || Specifies the amount of rounding for each corner. Larger values mean more rounding.||
|| `debugBackground` || Both || Specifies the background properties to apply when the regions are being shown in "debug" mode. Follows the same convention as the `background` option. ||
|| `debugBorder` || Both || Specifies the border properties to apply when the regions are being shown in "debug" mode. Follows the same convention as the `border` option.||
|| `showCloseButton` || Both || `true` displays a closing button at the top right corner of all regions. The default is `false` ||
|| `closeImage` || Both || A URL pointing to the image that is used as the close button. Example: `closeImage: url('close.png')`. By default an X-like image is shown. ||
|| `onClick` || General || A javascript function that is called when a region is clicked. ||
|| `onMouseOver` || General || A javascript function that is called when the mouse is positioned over the plugin. ||
|| `onMouseOut` || General || A javascript function that is called when the mouse moves outside of the plugin. ||

== Ads Configuration Options ==

|| *Property name* || *Level* || *Version* || *Description* ||
|| `vastServerURL` || General || 0.4.5 ||  The url of the OpenX VAST server ||
|| `disableControls` || Both || 0.4.5 ||  Specifies whether or not the stop/scrubber is to be disabled when ads are played. The default value is `true`. Can be overriden at the `Ad Slot` level. ||
|| `companionDivIDs` || Both || 0.4.5 ||  Identifies the companion div blocks that are to be used to display companion ads accompanying a video ad. An array of identifiers is expected in the format of `[ { id:Z, width:X, height:Y }, ... { id:Z, width:X, height:Y } ]` allowing multiple companion div blocks to be specified across the web page. The `id` value must match the div block `id` in the web page. The `width` and `height` values are used by the plugin to identify which companion (specified in the VAST template) is to be shown in each div block. ||
|| `adSchedule` || General || 0.4.5 ||  Allows a range of `ad spots` to be specified. Each `ad spot` is a unique definition of a particular type of video ad to be played against the programme stream. For example, if a `pre-roll`, `mid-roll` and `post-roll` video ad were to be scheduled when a stream plays, three individual ad spots would have to be defined - one for each video ad type. If a `pre-roll` and `overlay` were to be scheduled, 2 unique `Ad Spot` definitions are required. Ad Spot definitions can be limited to a particular "stream" or duration, and in the case of overlay/non-overlay video ads, can be scheduled to start at a particular time during a programme stream. Ad Spots are defined as an array with the format `[ { adspot1-options }, ... { adSpotN-options} ]`. Each `Ad Spot` definition must define at least a `zone`, `position` and `duration`. In addition, Overlay and Non-Overlay ads must also define a `width` and `height`. ||
|| `zone` || AdSpot || 0.4.5 ||  The OpenX `zone` mapping to this ad spot. Zones are special constructs in the OpenX Ad Server. Please see the OpenX ad server documentation for more details. ||
|| `position` || AdSpot || 0.4.5 ||  The position of this ad - can be one of the following values: for linear ads `pre-roll`, `mid-roll`, `post-roll`, for non-linear overlay and non-overlay ads, the value must be specified as a region ID. ||
|| `duration` || AdSpot || 0.4.5 ||  The duration of the ad - mandatory in the case on time restricted non-linear overlay and non-overlay ads. The value is specified as a number of seconds or `'unlimited'` if the ad is to play for the entire duration of the programme stream. The default value is `'unlimited'`. ||
|| `notice` || AdSpot || 0.4.5 ||  Identifies whether or not a special notice is to be displayed when a video ad plays. For example, wording such as "This advertisement runs for 30 seconds" may be displayed. Notices are declared in the format `{ show: value, region: value, message: value}` where `show` is a `true` or `false` value, `region` is the `id` of the region where the message is to be shown and `message` is a HTML text block that specifies what to show. The `message` can contain a keyword `_seconds_` to allow the duration of the ad to be placed into the text when the message is shown. Any class styling defined in the `message` must be declared as available in the associated `region` declaration. ||
|| `selectionCriteria` || General || 0.4.5 ||  Allows the selection of an ad to be refined by a specific selection. An example is `selectionCriteria: [ { name:"age", value:"25" }, { name:"gender", value:"male" } ]` - this definition will tell OpenX to restrict ad selection based on an age and gender value (but only if these have been configured on the openX side). The format for the `selectionCriteria` field is an array of objects with each object specifying a field `name` and `value` to pass through  ||
|| `applyToParts` || AdSpot || 0.4.5 ||  Allows an ad spot declaration to be restricted to a specific set of programme streams. The value is specified as an array of integers between 0 and the number of programme streams declared. For example if an Ad Spot is to be limited to only the first stream, a value of `[0]` would be declared. To limit a spot to the second and third streams `[2,3]` would be declared and so forth. ||
|| `width` || AdSpot || 0.4.5 ||  The width of the ad spot - applicable for non-linear overlay/non-overlay ads which are bound by strict dimensions. An ad must be found in the VAST data to match this width to ensure that it is displayed.||
|| `height` || AdSpot || 0.4.5 ||  The height of the ad spot - applicable for non-linear overlay/non-overlay ads which are bound by strict dimensions. An ad must be found in the VAST data to match this width to ensure that it is displayed. ||
|| `startTime` || AdSpot || 0.4.5 ||  The time an ad is to start - used by mid-roll and non-linear ads to identify when an ad is to be started during the programme stream. The value must be specified in the form of a timestamp `'HH:MM:SS'` ||

== Debug Configuration Options ==